<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 密码校验规则。另外：如果要使用缓存，在这里进行配置-->
    <!--<bean id="credentialsMatcher" class="com.bob.core.utils.shiro.RetryLimitHashedCredentialsMatcher">-->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!-- hashAlgorithmName必须的，没有默认值。可以有MD5或者SHA-1，如果对密码安全有更高要求可以用SHA-256或者更高。
        这里使用MD5 storedCredentialsHexEncoded默认是true，此时用的是密码加密用的是Hex编码；false时用Base64编码
        hashIterations迭代次数，默认值是1。 -->
        <!--<constructor-arg ref="cacheManager"/>-->
        <property name="hashAlgorithmName" value="md5"/><!--需要和PasswordHelper中的参数配置一致-->
        <property name="hashIterations" value="2"/><!--需要和PasswordHelper中的参数配置一致-->
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="com.bob.core.utils.shiro.MyRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <property name="realm" ref="myRealm"/>
        <!-- By default the servlet container sessions will be used.  Uncomment this line
             to use shiro's native sessions (see the JavaDoc for more): -->
        <!-- <property name="sessionMode" value="native"/> -->
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
    <!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--override these for application-specific URLs if you like:-->
        <property name="loginUrl" value="/admin/login"/>
        <!--<property name="successUrl" value="/admin/login/loginSuc"/>-->
        <!--<property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
        <!-- defined will be automatically acquired and available via its beanName in chain        -->
        <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="anAlias" value-ref="someFilter"/>
            </util:map>
        </property> -->
        <property name="filterChainDefinitions">
            <!--按照从上到下的顺序进行匹配，自要通过就不再往下进行-->
            <value>
                <!--资源文件放行-->
                /ext/** = anon
                /resources/** = anon
                <!--登陆操作放行-->
                /admin/loginAction = anon
                <!--/admin/sysUser/* = authc, perms[sysUser:list]-->
                <!-- more URL-to-FilterChain definitions here-->
                <!-- some example chain definitions:-->
                <!--/admin/** = authc, roles[admin]-->
                <!--/docs/** = authc, perms[document:read]-->
                <!-- 其余全部需要登录 -->
                /** = authc
            </value>
        </property>
    </bean>

</beans>